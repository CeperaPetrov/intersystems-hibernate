name: CI
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types:
      - released
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.build.outputs.name }}
      version: ${{ steps.build.outputs.version }}
    steps:
      - uses: actions/checkout@v2
      - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/* || true
      - uses: actions/setup-java@v1
        with:
          java-version: '1.8'
      - name: build jar
        id: build
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          [ $GITHUB_EVENT_NAME == 'release' ] && VERSION=${{ github.event.release.tag_name }} && VERSION=${VERSION/v/}
          [ $GITHUB_EVENT_NAME == 'push' ] && VERSION+=-beta && VERSION+=.$(($(git tag -l "v$VERSION.*" | sort -nt. -k4 2>/dev/null | tail -1 | cut -d. -f4)+1))
          [ $GITHUB_EVENT_NAME == 'pull_request' ] && VERSION+=-dev.${{ github.event.pull_request.number }}
          mvn versions:set -DnewVersion=$VERSION
          mvn --batch-mode package
          NAME=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)-$VERSION
          echo ::set-output name=name::$NAME
          echo ::set-output name=version::$VERSION
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.build.outputs.name }}.jar
          path: target/${{ steps.build.outputs.name }}.jar
  release:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: ${{ needs.build.outputs.name }}.jar
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.build.outputs.version }}
          release_name: v${{ needs.build.outputs.version }}
          prerelease: ${{ github.event_name != 'release' }}
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ needs.build.outputs.name }}.jar
          asset_name: ${{ needs.build.outputs.name }}.jar
          asset_content_type: application/zip
  deploy:
    runs-on: ubuntu-latest
    if: (github.event_name == 'release')
    needs:
      - build
    steps:
      - uses: actions/checkout@v2
        with:
          ref: main
      - uses: actions/setup-java@v1
        with:
          java-version: '1.8'
      - name: build jar
        id: build
        env:
          VERSION: ${{ steps.build.outputs.version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mvn versions:set -DnewVersion=$VERSION
          mvn --batch-mode deploy
          VERSION=`echo $VERSION | awk -F. '/[0-9]+\./{$NF++;print}' OFS=.`
          mvn versions:set -DnewVersion=$VERSION
          mvn versions:commit
          git config --global user.name 'ProjectBot'
          git config --global user.email 'bot@users.noreply.github.com'
          git add pom.xml
          git commit -m 'auto bump version with release'

